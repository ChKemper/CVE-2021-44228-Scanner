package com.logpresso.scanner;

import java.io.Closeable;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetSocketAddress;
import java.text.SimpleDateFormat;

import com.logpresso.scanner.json.JsonObject;
import com.logpresso.scanner.utils.IoUtils;

public class LogGenerator implements LogListener, Closeable {

	// See rfc5424
	public static final String PRI_ALERT = "<129>";
	public static final String PRI_WARN = "<132>";
	public static final String PRI_NOTICE = "<133>";

	private static final String LF = File.separatorChar == '\\' ? "\r\n" : "\n";
	private static final boolean APPEND = true;

	private Configuration config;
	private String hostname;
	private DatagramSocket socket;
	private FileOutputStream fos;

	public LogGenerator(Configuration config) throws IOException {
		this.config = config;
		this.hostname = IoUtils.getHostname(config.isDebug());

		if (config.getUdpSyslogAddr() != null)
			socket = new DatagramSocket();

		if (config.getLogPath() != null)
			fos = new FileOutputStream(config.getLogPath(), APPEND);
	}

	@Override
	public void close() throws IOException {
		IoUtils.ensureClose(socket);
		IoUtils.ensureClose(fos);
	}

	@Override
	public void onDetect(ReportEntry entry) {
		if (socket != null)
			sendDetectSyslog(entry);

		if (fos != null)
			writeDetectLog(entry);
	}

	@Override
	public void onError(ReportEntry entry) {
		if (socket != null)
			sendErrorSyslog(entry);

		if (fos != null)
			writeErrorLog(entry);
	}

	private String getErrorLog(ReportEntry entry) {
		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ");
		String escapedPath = JsonObject.escape(entry.getPath().getAbsolutePath());
		String escapedError = entry.getError() != null ? JsonObject.escape(entry.getError()) : "";
		return String.format("{\"time\": \"%s\", \"hostname\": \"%s\", \"path\": \"%s\", \"error\": \"%s\"}",
				df.format(entry.getReportTime()), hostname, escapedPath, escapedError);
	}

	private void writeDetectLog(ReportEntry entry) {
		String log = entry.getJsonLine(hostname) + LF;
		try {
			fos.write(log.getBytes("utf-8"));

			// for incremental loading
			fos.flush();
		} catch (Throwable t) {
			System.out.println("Error: Cannot write log file (" + t.getMessage() + ")");
			if (config.isDebug())
				t.printStackTrace();
		}
	}

	private void writeErrorLog(ReportEntry entry) {
		try {
			String log = getErrorLog(entry) + LF;
			fos.write(log.getBytes("utf-8"));

			// for incremental loading
			fos.flush();
		} catch (Throwable t) {
			System.out.println("Error: Cannot write log file (" + t.getMessage() + ")");
			if (config.isDebug())
				t.printStackTrace();
		}
	}

	private void sendDetectSyslog(ReportEntry entry) {
		try {
			String syslog = entry.getJsonLine(hostname);
			if (entry.getStatus() == Status.VULNERABLE)
				syslog = PRI_ALERT + syslog;
			else if (entry.getStatus() == Status.POTENTIALLY_VULNERABLE)
				syslog = PRI_WARN + syslog;
			else if (entry.getStatus() == Status.MITIGATED && config.getSyslogLevel().ordinal() <= SyslogLevel.INFO.ordinal())
				syslog = PRI_NOTICE + syslog;
			else
				return;

			sendSyslogPacket(socket, config.getUdpSyslogAddr(), syslog);

		} catch (Throwable t) {
			System.out.println("Error: Cannot send syslog to " + config.getUdpSyslogAddr() + " - " + t.getMessage());
			if (config.isDebug())
				t.printStackTrace();
		}
	}

	private void sendErrorSyslog(ReportEntry entry) {
		if (config.getSyslogLevel() != SyslogLevel.DEBUG)
			return;

		try {
			String msg = getErrorLog(entry);
			String syslog = "<135>" + msg;
			sendSyslogPacket(socket, config.getUdpSyslogAddr(), syslog);
		} catch (Throwable t) {
			System.out.println("Error: Cannot send syslog to " + config.getUdpSyslogAddr() + " - " + t.getMessage());
			if (config.isDebug())
				t.printStackTrace();
		}
	}

	private void sendSyslogPacket(DatagramSocket socket, InetSocketAddress remote, String syslog) throws IOException {
		byte[] b = syslog.getBytes("utf-8");
		DatagramPacket pkt = new DatagramPacket(b, b.length);
		pkt.setSocketAddress(remote);
		socket.send(pkt);
	}
}
